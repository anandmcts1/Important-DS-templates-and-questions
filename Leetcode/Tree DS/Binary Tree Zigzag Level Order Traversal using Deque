/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 **/
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        deque<pair<TreeNode*,int>>q;
        vector<vector<int>>ans;
        if(root==NULL)
            return ans;
        
        q.push_back({root,0});
        int flag=0;
        while(!q.empty())
        {
            int ff=q.front().second;
            int ss=q.back().second;
           
            if(ff==ss)
            {
                if(ff%2==0)
                    flag=0;
                else
                    flag=1;
            }
            if(flag==0)
            {
                //front se karna hai 
                if(ans.size()<=ff)
                {
                    ans.push_back(vector<int>());
                    ans[ff].push_back(q.front().first->val);
                }
                else
                {
                    ans[ff].push_back(q.front().first->val);
                }
                if(q.front().first->left)
                {
                    q.push_back({q.front().first->left,ff+1});
                }
                if(q.front().first->right)
                {
                    q.push_back({q.front().first->right,ff+1});
                }
                q.pop_front();
            }
            else
            {
                //back se 
                
                if(ans.size()<=ss)
                {
                    ans.push_back(vector<int>());
                    ans[ss].push_back(q.back().first->val);
                }
                else
                {
                    ans[ss].push_back(q.back().first->val);
                }
                if(q.back().first->right)
                {
                    q.push_front({q.back().first->right,ss+1});
                }
                if(q.back().first->left)
                {
                    q.push_front({q.back().first->left,ss+1});
                }
                q.pop_back();
            }
        }
        return ans;
        
    }
};