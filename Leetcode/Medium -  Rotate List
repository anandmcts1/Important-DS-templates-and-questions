// In this we have to change only one linkage of the list

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int lengthList(ListNode* temp)
    {
        int len=0;
        while(temp!=NULL)
        {
            len+=1;
            temp=temp->next;
        }
        return len;
    }
    ListNode* rotateRight(ListNode* head, int k) {
        
        int len=lengthList(head);
        if(len==0)
            return head;
        if(k%len==0 or len==1)
            return head;
        
        int pos=k%len;
        pos=len-pos-1;
        ListNode* temp=head;
        for(int i=0;i<pos;i++)
            temp=temp->next;
        
        ListNode* newHead=temp->next;
        temp->next=NULL;
        temp=newHead;
        while(temp->next!=NULL)
            temp=temp->next;
        temp->next=head;
        return newHead;
        
    }
};