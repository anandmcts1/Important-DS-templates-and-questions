/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
    typedef long long int ll;
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        string s1="",s2="";
        
        while(l1!=NULL)
        {
            char x=l1->val+'0';
            s1+=x;
            l1=l1->next;
        }
        while(l2!=NULL)
        {
            char x=l2->val+'0';
            s2+=x;
            l2=l2->next;
        }
        reverse(s1.begin(),s1.end());
        reverse(s2.begin(),s2.end());
        
        string ans="",s3="",s4="";
        if(s1.size()<s2.size())
        {
            for(ll i=s1.size();i<s2.size();i++)
                s3+='0';
        }
        else if(s1.size()>s2.size())
        {
            for(ll i=s2.size();i<s1.size();i++)
                s4+='0';
        }
        s3+=s1;
        s4+=s2;
        s1=s3;
        s2=s4;
        
        ll carry=0;
        for(ll i=s1.size()-1;i>=0;i--)
        {
            ll xx=s1[i]-'0'+s2[i]-'0'+carry;
            
            if(xx<=9)
            {
                ans+=(xx+'0');
                carry=0;
            }
            else
            {
                ans+=(xx%10+'0');
                carry=xx/10;
            }
        }
         if(carry>0)
         ans+=(carry+'0');
        // reverse(ans.begin(),ans.end());
       
        // cout<<s1<<" "<<s2<<" "<<ans<<" "<<carry<<endl;
        
      
       
        
        ListNode* head;
        ListNode* prev;
        head=NULL;
        
        // cout<<ans<<endl;
        if(ans.size()<=1 and ans[0]=='0')
        {
            ListNode* temp=new ListNode();
            temp->val=0;
            temp->next=NULL;
            return temp;
        }
        ll xxx=ans.size();
        ll i=0;
        
        while(i<xxx)
        {
            ll xx=ans[i]-'0';
            i+=1;
            
            ListNode* temp=new ListNode();
            temp->val=xx;
            temp->next=NULL;
            
            if(head==NULL)
            {
                head=temp;
                prev=temp;
            }
            else
            {
                prev->next=temp;
                prev=prev->next;
            }
        }
        
        return head;
        
    }
};
