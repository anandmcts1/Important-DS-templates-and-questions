
class Solution {
public:
    vector<vector<string>>final;
    bool safe(vector<string> &ans,int i,int j,int n)
    {
        //check left diagonal
        int c=j-1;
        for(int r=i-1;r>=0;r--)
        {
            if(c<0)
                break;
            if(ans[r][c]=='Q')
                return false;
            c-=1;
            
        }
        //check right diagonal
        c=j+1;
          for(int r=i-1;r>=0;r--)
        {
               if(c>=n)
                   break;
            if(ans[r][c]=='Q')
                return false;
              c+=1;
        }
        //check up
         for(int r=i-1;r>=0;r--)
        {
            if(ans[r][j]=='Q')
                return false;
        }
        return true;              
    }
    bool nQueen(vector<string> &ans,int i,int n)
    {
        if(i>=n)
        {
            final.push_back(ans);
            return false;
        }
        for(int j=0;j<n;j++)
        {
            //check safe position
            if(safe(ans,i,j,n))
            {
                ans[i][j]='Q';
                //fir next columnt
                if(nQueen(ans,i+1,n))
                {
                    //then return true
                    return true;
                }
                else
                {
                    //backtrack
                    ans[i][j]='.';
                }
            }
        }
        return false;
        
    }
    int totalNQueens(int n) {
        string s="";
        for(int i=0;i<n;i++)
            s+=".";
        
            vector<string>temp(n,s);
            nQueen(temp,0,n);
            
        return final.size();
    }
};
