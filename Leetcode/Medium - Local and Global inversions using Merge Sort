class Solution {
public:
    int ans=0;
    vector<int>temp;
					int merge(vector<int>& arr, int start,int mid,int end)
					{
                        int xx=0;
                        int i=0,j=mid-start+1;	int ans=0;
						int m=mid-start;
						int n=end-mid-1;
						int point=start;
						for(int i=start;i<=mid;i++)
						temp[xx++]=arr[i];
						vector<int>arr2;
						for(int i=mid+1;i<=end;i++)
						temp[xx++]=arr[i];

						int tt=end-start;
						while(i<=m and j<=tt)
						{
							if(temp[i]<=temp[j])
							{
								arr[point++]=temp[i];
								i+=1;
							}
							else
							{
								arr[point++]=temp[j];
								j+=1;
								ans+=(mid-(i+start)+1);
							}
						}
						while(i<=m)
						arr[point++]=temp[i++];
						while(j<=tt)
						arr[point++]=temp[j++];
						return ans;
					}

					int mergesort(vector<int>& arr,int start,int end)
					{
						if(end-start<=0)
						return 0;

						int mid=(start+end)/2;
						int ans=0;
						ans+=mergesort(arr,start,mid);
						ans+=mergesort(arr,mid+1,end);
						
						ans+=merge(arr,start, mid, end);
						return ans;
					}
    
    bool isIdealPermutation(vector<int>& A) {
        
        int n=A.size();
        temp.resize(n,0);
        int localInv=0;
        for(int i=0;i<n-1;i++)
        {
            if(A[i]>A[i+1])
                localInv+=1;
        }
        int globalInv=mergesort(A,0,n-1);
        return localInv==globalInv;
        
    }
};
