class MyQueue {
    typedef int ll;
public:
    /** Initialize your data structure here. */
    stack<ll>st1,st2;
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        
        st1.push(x);
        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        if(!st2.empty())
        {
            ll x=st2.top();
            st2.pop();
            return x;
            
        }
        else
        {
            while (!st1.empty())
            {
                ll x=st1.top();
                st1.pop();
                st2.push(x);
            }
            ll x=st2.top();
            st2.pop();
            return x;
        }
        
    }
    
    /** Get the front element. */
    int peek() {
        if(!st2.empty())
        {
            ll x=st2.top();
            
            return x;
            
        }
        else
        {
            while (!st1.empty())
            {
                ll x=st1.top();
                st1.pop();
                st2.push(x);
            }
            ll x=st2.top();
           
            return x;
        }
        
        
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        
        if(st1.empty()==1 and st2.empty()==1)
            return 1;
        return 0;
        
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
