/**
 *    author:  accesss_denied
**/
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ff first
#define ss second
#define pb push_back
#define endl "\n"
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
ll mod=1e9+7;			
ll inf=1e18;

vector<ll>adj[100005];
ll n;
ll dp[100005];
vector<ll>edges;
ll visited[100005];
				ll dfs(ll source)
				{
					
					visited[source]=1;
					for(auto it:adj[source])
					{
						if(visited[it]==0)
						{
							dp[source]+=(dfs(it));
						}
					}

					ll x=dp[source]+1;
					ll y=n-x;
					edges.pb(x*y);

					return dp[source]+1;
				}				
            
           
        


 
int main() {
				fast
				#ifndef ONLINE_JUDGE
				freopen("input.txt","r",stdin);
				freopen("output.txt","w",stdout);
				#endif

				ll t;
				cin>>t;
				while(t--)
				{

                	cin>>n;
					for(ll i=0;i<n-1;i++)
					{
						ll a,b;
						cin>>a>>b;
						adj[a].pb(b);
						adj[b].pb(a);
					}
					ll m;
					cin>>m;

					ll prime[m];
					for(ll i=0;i<m;i++)
					cin>>prime[i];
					sort(prime,prime+m);
					reverse(prime,prime+m);

					dfs(1);
					sort(edges.rbegin(),edges.rend());
					if(m>=n-1)
					{
						ll rem=m-(n-2);
						ll xx=1;
						for(ll i=0;i<rem;i++)
						{
							xx=(xx%mod*prime[i]%mod)%mod;
						}
						ll ans=(xx%mod*edges[0]%mod)%mod;
						for(ll i=rem;i<m;i++)
						{
							ll a=edges[i-rem+1];
							ll b=prime[i];
							ll y=(a%mod* b%mod)%mod;
							ans=(ans%mod+y%mod)%mod;
						}
						cout<<ans<<endl;
					}
					else 
					{
						ll ans=0;
						for(ll i=0;i<m;i++)
						{
							ll a=edges[i];
							ll b=prime[i];
							ll y=(a%mod* b%mod)%mod;
							// cout<<a<<" "<<b<<" "<<y<<endl;
							ans=(ans%mod+y%mod)%mod;
						}
						for(ll i=m;i<edges.size()-1;i++)
						{
							ans=(ans%mod+edges[i]%mod)%mod;
						}
						cout<<ans<<endl;
					}

					// for(auto it:edges)
					// cout<<it<<" ";
					
					

					for(ll i=1;i<=n;i++)
					{
						dp[i]=0;
						visited[i]=0;
						adj[i].clear();
					}
					edges.clear();

				}

                return 0;
            }
