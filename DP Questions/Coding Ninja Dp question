//question you have given an array of 26 length which represents cost of characters of english alphabets
//you have to find the characters whose sum forms a target sum which is given already and print maximum lexographically answer

#include <bits/stdc++.h>
using namespace std;
#define ll int
#define ff first
#define ss second
#define pb push_back
#define endl "\n"
#define inf 2000000000
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
ll mod=1e9+7;	
ll a[27];
ll target;
ll dp[27][10008];
string aa="";

      ll solve(ll sum)
      {
        if(sum<0)
        return 0;
        if(sum==0)
        return 1;
        ll ans=0;
        for(ll i=25;i>=0;i--)
        {
          ans=solve(sum-a[i]);
          if(ans==1)
          {
            aa+=(char)(i+'a');
            return 1;
          }
        }
        return 0;
      }

	   
int main() {
			fast
			

      for(ll i=0;i<26;i++)
      cin>>a[i];
      cin>>target;
      memset(dp,-1,sizeof(dp));

      ll x=solve(target);
      if(x==0)
      cout<<x<<endl;
      else
      {
        reverse(aa.begin(),aa.end());
        cout<<aa;
      }
      
      

			return 0;
		 }	






































#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ff first
#define ss second
#define pb push_back
#define endl "\n"
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
ll mod=1e9+7;			
	   
int main() {
			fast
			#ifndef ONLINE_JUDGE
			freopen("input.txt","r",stdin);
			freopen("output.txt","w",stdout);
			#endif

			
				ll n=26;
				ll cost[n];
				for(ll i=0;i<n;i++)
				cin>>cost[i];
				ll target;
				cin>>target;

				bool dp[target+10][26];
				memset(dp,0,sizeof(dp));

				for(ll i=0;i<26;i++)
				dp[0][i]=1;

				for(ll i=0;i<target+10;i++)
				{
					for(ll j=0;j<26;j++)
					{
						if(i>=cost[j])
						{
							bool flag=0;
							for(ll k=0;k<26;k++)
							{
								if(dp[i-cost[j]][k])
								dp[i][j]=1;
							}
						}
						
					}
				}
			

				while(target)
				{
					ll x=target;
					for(ll i=n-1;i>=0;i--)
					{
						if(dp[x][i])
						{
							cout<<(char)(i+'a');
							target-=cost[i];
							break;
						}
					}
					if(x==target)
					{
						cout<<0;
						break;
					}
				}

				

                
			
			return 0;
		 }	







/*
#include<bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mod 1000000007
#define pi (3.141592653589)
#define deb(n) cerr << #n << " = " << (n) << " ";
using namespace std;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout << fixed;
	cout.precision(10);
	
	int n = 26;
	int a[n];
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	int target;
	cin >> target;
	vector<vector<bool>> dp(target + 10, vector<bool> (26));
	for(int i = 0; i < 26; i++)
	{
		dp[0][i] = true;
	}
	for(int i = 0; i < target; i++)
	{
		for(int j = 0; j < 26; j++)
		{
			if(dp[i][j] == false)
				continue;
			for(int k = 0; k < 26; k++)
			{
				if(i + a[k] <= target)
				{
					dp[i + a[k]][k] = true;
				}
			}
		}
	}
	while(target)
	{
		for(int i = n - 1; i >= 0; i--)
		{
			int x = target;
			if(dp[target][i])
			{
				cout << (char) ('a' + i);
				target -= a[i];
				break;
			}
		}
		if(x == target)
		{
			cout << 0;
			return 0;
		}
	}

	return 0;
}
*/
